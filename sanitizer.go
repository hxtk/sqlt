package sqlt

import (
	"maps"

	"github.com/jackc/pgx/v5"
)

// Sanitizer formats data for safe SQL escaping.
//
// This package provides a default formatter that converts variable
// or function pipelines in the template to parameter bindings by default.
//
// Callers may define their own Formatter values to support other functions
// that generate safe SQL and parameter mappings.
type Sanitizer interface {
	// Format must output a safe SQL string associated with an argument.
	//
	// A Sanitizer must convert any untrusted inputs into named parameters
	// and store the associated values for later retrieval via Args.
	//
	// A Template may invoke `Format` any number of times during its execution.
	Format(arg any) string

	// Args must output the collected parameter bindings associated with all
	// calls to `Format` before calling Args.
	//
	// A Template calls args after it finishes executing the template to
	// retrieve all bound parameters created in the course of template execution.
	Args() pgx.NamedArgs
}

// FormatterFunc defines a function that returns a new instance of a Formatter.
//
// A Template invokes a FormatterFunc once per execution, and the FormatterFunc
// must return "clean" instance of the Formatter each time.
//
// The Template generates a new Formatter for each execution because the
// Formatter stores state related to the parameter bindings generated by the
// execution.
type SanitizerFunc func() Sanitizer

// SanitizerMap represents a binding from sanitizers to the names by which
// templates may access them.
//
// A Template doesn't automatically escape a function pipeline ending with
// a sanitizer, and assumes the sanitizer produces trusted output.
//
// This package reserves the namespace prefix `_sqlt_*` for function names.
// Callers shouldn't define functions having that prefix in a FuncMap or
// a SanitizerMap.
type SanitizerMap map[string]SanitizerFunc

// collectArgs merges the bound parameters from all sanitizers into a single
// `pgx.NamedArgs` mapping.
func collectArgs(sanitizers ...Sanitizer) pgx.NamedArgs {
	if len(sanitizers) < 1 {
		return pgx.NamedArgs{}
	}

	allArgs := make([]pgx.NamedArgs, 0, len(sanitizers))
	for _, v := range sanitizers {
		allArgs = append(allArgs, v.Args())
	}

	for i := 1; i < len(allArgs); i++ {
		maps.Copy(allArgs[0], allArgs[i])
	}

	return allArgs[0]
}
